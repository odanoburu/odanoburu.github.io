#+TITLE: Benchmarking Logica
#+DATE: <2021-10-19 Tue>

[[https://github.com/EvgSkv/logica][Logica]] is a logic programming language that compiles to SQL. It is a
successor to [[https://research.google/pubs/pub43462/][Yedalog]], and can be used as a Datalog-like frontend to
all kinds of data stores that support SQL. We describe here a port of
the [[http://www.tpc.org/tpch/][TPC-H]] benchmark queries (*note*: not the benchmark itself) to
Logica, which helps evaluate how complete Logica's translation to SQL
is, and if using it entails any sort of penalty, performance-wise.

* TPC

  *Disclaimer: the benchmark we describe in this document is derived
  from a TPC benchmark, but is by no means a TPC benchmark, for
  reasons we hope will become clear in throughout the text.*

  The Transaction Processing Performance Council (TPC) is an
  organization responsible for producing fair benchmarks. In the case
  of the TPC-H benchmark, SQL queries that support business decisions
  are the objects of the benchmark. Here is an example of a TPC-H
  query:

  #+name: sql-tpc-6-example
  #+caption: SQL code for TPC-H query #6 (SQLite flavour)
  #+begin_src sql
SELECT sum(l_extendedprice*l_discount) AS revenue
FROM lineitem
WHERE l_shipdate >= date('1994-01-01')
AND l_shipdate < date('1994-01-01', '+1 year')
AND l_discount between 0.05 and 0.07
AND l_quantity < 24;
  #+end_src

  (This query returns the amount ‘spent’ in order discounts that range
  from 5% to 7% in a specific year; you can find the database schema
  at the TPC-H specification.)

  The TPC-H benchmark is done under controlled conditions so that
  hardware vendors can advertise the performance of their computer
  systems (a measure of price per query workload). If you are
  interested, you can download and read more about the TPC-H benchmark
  at their [[http://www.tpc.org/tpch/][webpage]], but for our purposes (comparing the original SQL
  queries to their versions as translated by Logica) we can relax many
  of the TPC's strict requirements. As examples, we do not worry about
  randomizing the queries (which is a way of preventing a vendor from
  optimizing for particular queries), nor do we care about concurrent
  queries (we just run them sequentially), because we are not trying
  to measure hardware/DBMS/query performance under different
  workloads.

* Logica

  [[https://github.com/EvgSkv/logica][Logica]] is logic programming language that compiles to SQL (you may
  specify a flavour of SQL, but the default is Google's BigQuery). It
  is implemented in Python, and has no dependencies beyond Python's
  standard library. To get a feeling for the language, you can see
  below the translation of the SQL query [[sql-tpc-6-example][above]]:

  #+caption: Logica code for TPC-H query #6
  #+begin_src logica
Query(revenue? += l_extendedprice * l_discount) distinct :-
  lineitem(l_extendedprice:, l_discount:, l_shipdate:, l_discount:, l_quantity:),
  l_shipdate >= Date(date),
  l_shipdate < Date(date,  "+1 year"),
  l_discount >= 0.05,
  l_discount < 0.07,
  l_quantity < 24,
  date == "1994-01-01";
  #+end_src

  (This Logica code generates the same code as the [[sql-tpc-6-example][original SQL query]],
  modulo some extraneous parentheses and explicit table references.)

  As we can see in this simple example, the SQL and Logica queries are
  pretty similar, although the Logica one is more verbose because it
  requires explicit names for the columns we are bringing in
  scope. Logica also allows us to name a value easily, which can then
  be reused in different parts of the query (something SQL does not
  offer as simply, although any decent SQL client will make up for it
  with the use of query parameters, of course).  Logica goes further
  than allowing us to declare and use variables, though: we can also
  define functions and subqueries that can be reused in different
  queries, reducing code duplication. For more details on Logica, see
  its [[https://colab.research.google.com/github/EvgSkv/logica/blob/main/tutorial/Logica_tutorial.ipynb][tutorial]].

* The benchmark

  It goes without saying that because Logica compiles to SQL, it can
  at most match the performance of an equivalent SQL query. If we
  manage to write a Logica query that runs faster and/or with less
  space requirements than an equivalent SQL query, we can always take
  the Logica-produced SQL to be our new baseline. The interesting case
  (for us) is when there is no Logica query that compiles to a query
  with the same plan as the original SQL query that we are comparing
  to; when this happens, how faster/slower is the Logica-generated
  query? This is the question that our benchmark answers.

  We have taken the 22 original queries of the TPC-H specification (as
  written in SQL), and attempted an equivalent Logica translation,
  striving for Logica code that produced not only an equivalent query
  (in that produced the same results), but also a query with the same
  query plan as the original (which is, for all intents and purposes,
  the /same/ query). If we could write Logica code that compiled to
  any SQL query, this benchmark would be mostly useless, because we
  could always write a Logica query that compiled to exactly the SQL
  query that we wanted. But alas, this is not so; SQL is a big
  language (the SQL standard has more than a thousand pages), and
  Logica (at the time of writing) compiles to only a subset of it (as
  examples, Logica never compiles to ~OUTER JOIN~ nor to ~EXISTS~ at
  the time of writing). This subset is enough to express almost all
  queries in the TPC-H benchmark (we will go into details shortly),
  but some Logica queries may never have the same query plan as the
  original, which means they have difference performance
  characteristics.

  To measure such differences, we have used a custom Python script
  that compares SQL queries. It currently only works with SQLite,
  which is the database managements system (DBMS) that we used for
  this experiment, but it can be easily extended to handle other
  DBMSs. The script takes as input two SQL queries and a database, and
  first checks if their query plans (as reported by the underlying
  DBMS) are the same; if they are, the queries are considered equal,
  and we skip any further comparison. If the query plans are not the
  same, we run them against the input database and check that their
  results are the same; if they are, we deem the queries to be
  equivalent (which is a stretch, see the [[https://cosette.cs.washington.edu/][Cosette]] tool for actual
  equivalence of SQL queries), and we then proceed to measure their
  execution times. If the queries produce different results, we
  produce an error. For queries that do not have the same query plan
  but produce equal results, we finally run each a number of times (as
  specified by the user), sequentially, and record the time each run
  takes.

  We have run all queries with the TPC-H test database with a scale
  factor of 1 (which results in a ~1Gb SQLite =.db= file), which was
  generated with the DBGEN utility bundled with the [[http://tpc.org/TPC_Documents_Current_Versions/download_programs/tools-download-request5.asp][TPC-H tools
  archive]] provided by the TPC.

  As it stands, we do not record the Logica-to-SQL compilation time,
  which we deem to be negligible.

* Results

  Out of the 22 queries of the TPC-H, three were too slow for us to
  run in our hardware (queries #17, #20, and #22). Of the remaining
  queries, we were able to write Logica versions that compiled to
  queries with the same plans as the originals for queries #1, #3, #5,
  #6, #9, #10, and #14, and therefore do not benchmark them. For the
  remainder, we took their minimum execution times and computed the
  ratio between the Logica-generated SQL and the original TPC-H query;
  results are below.

#+name: results-table
#+caption: Ratio between the execution times of the Logica-generated and the original SQL queries
| Query |    Ratio |
|-------+----------|
| #2    |  1.20697 |
| #4    |  11.5661 |
| #7    |   1.0083 |
| #8    |  1.10887 |
| #11   |  1.09911 |
| #12   |  1.04529 |
| #13   | 0.300859 |
| #15   |  1.48583 |
| #16   |   10.525 |
| #18   |  1.80505 |
| #19   | 0.822488 |
| #21   |  1.13676 |

  Do take this results as transient; someone who is more apt at Logica
  may be able to write queries that match their original versions. In
  this way, even queries #4 and #16 (which are the only ones
  dramatically slower in their Logica versions) may have their results
  improved. As for the queries that run faster in their Logica
  versions, do remember the opening remarks of section [[* The
  benchmark]]; in addition, the original TPC-derived queries may still
  be faster in other hardware or using other DBMSs.

  With all these caveats, the results we found are not very useful,
  but the process of producing this benchmark has discovered Logica
  bugs that have been subsequently fixed (see commits [[https://github.com/EvgSkv/logica/commit/f11921b1a7a28d701a73471506cc6c51497ae163][f11921]] and
  [[https://github.com/EvgSkv/logica/commit/34cbe15b707da135ac7ba6244657309a546decb3][34cbe1]] and [[https://github.com/EvgSkv/logica/pull/133/][PR #133]], as well as the [[https://web.archive.org/web/20211020194234/https://github.com/EvgSkv/logica/discussions/126][discussions over the
  benchmark]]). We take this opportunity to thank Evgeny Skvortsov,
  Logica's author and maintainer, whose guidance and extremely helpful
  comments were instrumental to producing this experiment! To see the
  code related to the benchmark and documentation towards reproducing
  it, check out this [[https://github.com/odanoburu/logica-tpc][repository]].

* Future work

  The experimental benchmark we have described here suggests several
  improvements and future lines of work. An obvious first is improving
  the Logica queries we have written to make them match the original
  queries' plans whenever possible, which is something we have strived
  to do, but could still possibly improve upon.

  Another improvement would be to acquire better hardware and be able
  to run the queries that were too slow for our machine (queries #17,
  #20, and #22). Given better hardware we could also run the benchmark
  described here using bigger test databases (with greater scale
  factors). This would allow us to check whether the queries we
  compare have different algorithmic behaviour, something the single
  data points we have do not allow us to do. (We could run with
  smaller databases too, of course, but the TPC recommendation is to
  use a minimum scale factor of 1, which is what we have used.)

  It would also be interesting to explore how this benchmark behaves
  if we used other DBMSs. It may be that the query optimizer of
  another SQL engine would end up producing different results. We
  especulate that a better optimizer should make more query plans the
  same, reducing the number of queries that we actually benchmark.

  An obvious extension of this work is to derive more benchmarks from
  the adaptation of other TPC benchmarks, increasing the number of
  queries we compare and work with. This in turn can be used as a test
  suite for Logica itself, to capture any compiler regressions that
  may happen --- not only in terms of output correctness but also in
  terms of level of optimization, if Logica were ever to become an
  optimizing compiler.
